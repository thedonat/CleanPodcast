//
//  PodcastViewController.swift
//  Podcast
//
//  Created by Burak Donat on 5.11.2020.
//  Copyright (c) 2020 Burak Donat. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PodcastDisplayLogic: class {
    func displayPodcasts(viewModel: Podcast.FetchPodcasts.ViewModel)
    func displayPodcastDetail()
}

class PodcastViewController: UIViewController, PodcastDisplayLogic {

    @IBOutlet weak var tableView: UITableView!
    
    var interactor: PodcastBusinessLogic?
    var router: (NSObjectProtocol & PodcastRoutingLogic & PodcastDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = PodcastInteractor()
        let presenter = PodcastPresenter()
        let router = PodcastRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
        fetchPodcasts()
    }
    
    // MARK: Fetch Podcasts
    
    var displayedPodcasts: [Podcast.FetchPodcasts.ViewModel.DisplayedPodcast] = []
    
    func fetchPodcasts() {
        let request = Podcast.FetchPodcasts.Request()
        interactor?.fetchPodcasts(request: request)
    }
    
    func displayPodcasts(viewModel: Podcast.FetchPodcasts.ViewModel) {
        displayedPodcasts = viewModel.displayedPocasts
        tableView.reloadData()
    }
    
    func configureUI() {
        tableView.register(UINib(nibName: "PodcastTableViewCell", bundle: nil), forCellReuseIdentifier: "PodcastTableViewCell")
    }
    
    // MARK: Display Podcast Detail
    
    func displayPodcastDetail() {
        router?.routeToPodcastDetails(segue: nil)
    }
}


extension PodcastViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedPodcasts.count

    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "PodcastTableViewCell", for: indexPath) as! PodcastTableViewCell
        
        let podcast = displayedPodcasts[indexPath.row]
        cell.setView(imageUrl: podcast.artworkUrl100,
                     name: podcast.name,
                     artistName: podcast.artistName)
        
        return cell
    }
}


extension PodcastViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 150
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        displayPodcastDetail()
    }
}
